@page "/products/create"
@using PSA.Shared
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS

<PageTitle>Product Creation</PageTitle>



<EditForm Model="@product" OnValidSubmit="@HandleValidSubmit">
    <div class="mb-3 col-7">
        <label for="Name"><b>Product name</b></label>
        <input class="form-control" id="Name" @bind="@product.Name" placeholder="Name" type="text" name="Name" required>
    </div>
    <div class="mb-3">
        <label for="Description"><b>Product description</b></label>
        <textarea class="form-control" id="Description" @bind="@product.Description" placeholder="Description" name="Description" required></textarea>
    </div>
    <div class="col-2">
        <label for="Price"><b>Price</b></label>
        <input type="text" @bind="@price" class="form-control" id="Price" placeholder="Price">
    </div>
    <div class="mb-3">
        <label for="Picture"><b>Product picture</b></label>
        <input class="form-control" id="Picture" @bind="@product.Picture" placeholder="Picture" type="text" name="Picture">
    </div>
    <div>
        <label>
            Material:
            <InputSelect @bind-Value="product.Material">
                <option selected="selected" value="">Select a Material</option>
                <option value="1">Steel</option>
                <option value="2">Aluminum</option>
                <option value="4">Polycarbonate</option>
                <option value="5">PVC</option>
                <option value="6">Titanium</option>
            </InputSelect>
        </label>
    </div>
    <div>
        <label>
            Connection:
            <InputSelect @bind-Value="product.Connection">
                <option selected="selected" value="">Select a Connection</option>
                <option value="1">A</option>
                <option value="2">B</option>
                <option value="3">C</option>
                <option value="4">D</option>
            </InputSelect>
        </label>
    </div>
    <div>
        <label>
            Category:
            <InputSelect @bind-Value="product.Category">
                <option selected="selected" value="">Select a Category</option>
                <option value="2">Right Leg</option>
                <option value="3">Head</option>
                <option value="4">Left Arm</option>
                <option value="5">Right Arm</option>
                <option value="6">Left Leg</option>
                <option value="7">Body</option>
            </InputSelect>
        </label>
    </div>
    <div class="col-2">
        <label for="Attack"><b>Attack</b></label>
        <input type="text" @bind="@product.Attack" class="form-control" id="Attack" placeholder="Attack">
    </div>
    <div class="col-2">
        <label for="Defense"><b>Defense</b></label>
        <input type="text" @bind="@product.Defense" class="form-control" id="Defense" placeholder="Defense">
    </div>
    <div class="col-2">
        <label for="Speed"><b>Speed</b></label>
        <input type="text" @bind="@product.Speed" class="form-control" id="Speed" placeholder="Speed">
    </div>
    <button type="submit" class="btn">Kurti produktą</button>
</EditForm>





@code {
    private Product product = new Product();
    private string price = "";

    public async Task HandleValidSubmit()
    {
        bool result = !price.Any(x => char.IsLetter(x));
        if (!result)
        {
            await JS.InvokeVoidAsync("alert", "Invalid form");          
            NavManager.NavigateTo("/products", forceLoad: true);
        }
        product.Price = Convert.ToDouble(price);
        await Http.PostAsJsonAsync("api/Products", product);
        NavManager.NavigateTo("/products", forceLoad: true);
    }


    //private void HandleValidSubmit()
    //{
    //    PrettyWrite(product, product.title + ".json");
    //}

    //private static readonly JsonSerializerOptions _options =
    //new() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };

    //public static void PrettyWrite(object obj, string fileName)
    //{
    //    var options = new JsonSerializerOptions(_options)
    //    {
    //        WriteIndented = true
    //    };
    //    var jsonString = JsonSerializer.Serialize(obj, options);
    //    File.WriteAllText(fileName, jsonString);
    //}
}
