@page "/contracs/remove"
@using PSA.Shared
@inject HttpClient Http

<PageTitle>Remove Contract</PageTitle>


@if (productpages == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <section class="cart_area section_padding">
            <div class="container">
                <div class="cart_inner">
                    <div class="table-responsive">
                    @if (contracts?.Count != 0)
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <td>
                                        Contract ID
                                    </td>
                                    <td>
                                        Contract Date
                                    </td>
                                    <td>
                                        Order ID
                                    </td>
                                    <td>
                                        Manager Full Name
                                    </td>
                                    <td>

                                    </td>
                                </tr>
                            </thead>
                            <tbody class="table-group-divider">
                        @foreach (var item in contracts)
                        {
                            <tr>
                                <td>
                                    @item.id_Sutartis
                                </td>
                                <td>
                                    @item.isdavimo_data
                                </td>
                                <td>
                                    @item.fk_Uzsakymasid_Uzsakymas
                                </td>
                                <td>
                                    @GetManagerNameByID(item.fk_Vadybininkasid_Vadybininkas)
                                </td>
                                <td>
                                    <button type="submit" class="btn" @onclick="() => RemoveContractFromDB(item.id_Sutartis)">Remove</button>
                                </td>
                            </tr>
                        }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <h2>
                            There are no contracts.
                        </h2>
                    }
                    </div>
                </div>
            </div>
        </section>
}


@code {
    private ProductPages[]? productpages;

    public int x = 0;

    public double cost = 0;
    private List<Contract>? contracts = new List<Contract>();
    private List<Manager>? managers = new List<Manager>();

    protected override async Task OnInitializedAsync()
    {
        contracts = await Http.GetFromJsonAsync<List<Contract>>("api/Contracts");
        managers = await Http.GetFromJsonAsync<List<Manager>>("api/Manager");
        productpages = await Http.GetFromJsonAsync<ProductPages[]>("data/currentuser.json");
        if (productpages == null)
        {
            return;
        }

        cost = productpages.Sum(p => p.Price);
    }

    public class ProductPages
    {
        public string? Id { get; set; }
        public string? ImageSource { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public string? UploadedBy { get; set; }
        public string? UploadedRef { get; set; }
        public double Price { get; set; }
    }

    public string GetManagerNameByID(int id)
    {
        Manager? manager = managers.FirstOrDefault(m => m.id_Vadybininkas == id);
        if (manager is null)
            return string.Empty;
        return manager.name + " " + manager.last_name;
    }

    public async void RemoveContractFromDB(int id)
    {
        await Http.DeleteAsync($"api/Contracts/{id}");
        contracts = contracts.Where(contract => contract.id_Sutartis != id).ToList();
        await InvokeAsync(() => StateHasChanged());
    }
}
