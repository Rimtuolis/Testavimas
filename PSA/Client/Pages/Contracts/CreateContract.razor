@page "/contracts/create"
@using PSA.Shared
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Product Creation</PageTitle>

<EditForm Model="@contract" OnValidSubmit="@HandleSubmit">
    <label for="Order"><b>Select order id</b></label>
    <div class="input-group mb-3">
        <label class="input-group-text" for="ContractOrderSelect">Order ID's</label>
        <select class="form-select" id="ContractOrderSelect" @bind="@_orderid" required>
            @if (orders is not null)
            {
                <option selected>Select order ID</option>
                @foreach (OrderDto order in orders)
                {
                    <option value="@order.Id_Uzsakymas">@order.Id_Uzsakymas</option>
                }
            }
        </select>
    </div>

    <label for="Manager"><b>Select manager</b></label>
    <div class="input-group mb-3">
        <label class="input-group-text" for="ContractManagerSelect">Manager</label>
        <select class="form-select" id="ContractManagerSelect" @bind="@_managerid" required>
            @if (managers is not null)
            {
                <option selected>Select manager</option>
                @foreach (Manager manager in managers)
                {
                     <option value="@manager.id_Vadybininkas">@GetManagerNameByID(manager.id_Vadybininkas)</option>
                }
            }
        </select>
    </div>

    <button type="submit">Create contract</button>
</EditForm>


@code{
    private Contract contract = new Contract();
    private List<OrderDto>? orders = new List<OrderDto>();
    private List<Manager>? managers = new List<Manager>();
    private List<Contract>? _contracts;
    private int? _orderid;
    private int? _managerid;

    protected override async Task OnInitializedAsync()
    {
        managers = await Http.GetFromJsonAsync<List<Manager>>("api/Manager");
        orders = await Http.GetFromJsonAsync<List<OrderDto>>("api/Orders");
        _contracts = await Http.GetFromJsonAsync<List<Contract>>("api/Contracts");
        if(_contracts is not null)
            foreach (Contract contract in _contracts)
                orders = orders?.Where(o => o.Id_Uzsakymas != contract.fk_Uzsakymasid_Uzsakymas).ToList();
    }

    public async Task HandleSubmit()
    {
        if (_orderid is not null)
            contract.fk_Uzsakymasid_Uzsakymas = (int)_orderid;
        
        if (_managerid is not null)
            contract.fk_Vadybininkasid_Vadybininkas = (int)_managerid;

        await Http.PostAsJsonAsync("api/Contracts", contract);

        NavManager.NavigateTo("/contracts", forceLoad: true);
    }

    public string GetManagerNameByID(int id)
    {
        Manager? manager = managers?.FirstOrDefault(m => m.id_Vadybininkas == id);
        if (manager is null)
            return string.Empty;
        return manager.vardas + " " + manager.pavarde;
    }
}