@page "/robots"
@using PSA.Shared
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IJSRuntime JS


<h1>Robots</h1>


<h3>Select Robot or edit its RoboSwipe card</h3>

@if (Cards.Count == 0)
{
    <p>No robots available.</p>
}
else
{
    <div class="cardContainer">
        @foreach (var card in Cards)
        {
            <div class="swipeCard">
                <img src="@card.ImageUrl" alt="Robot Image" />
                <h2>@card.Description</h2>
                <div class="buttonContainer">
                    <button class="editButton" @onclick="() => EditCard(card)">Edit</button>
                    <button class="selectButton" @onclick="() => Swipe(card.fk_robot)">Swipe</button>
                    <button class="selectButton" @onclick="() => Select(card.fk_robot)">View matches</button>
                    <button class="editPartsButton" @onclick="() => EditParts(card.fk_robot)">Edit parts</button>
                </div>
            </div>
        }
    </div>
}


@code {
    List<SwipeCard> Cards = new List<SwipeCard>();
    List<RobotDto> robots = new List<RobotDto>();
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Pirmas Robot");
        robots = await Http.GetFromJsonAsync<List<RobotDto>>($"api/robots");
        foreach (RobotDto robot in robots)
        {
            if (robot != null)
            {
                Console.WriteLine("Antras Robot");
                SwipeCard card = await Http.GetFromJsonAsync<SwipeCard>($"card/element/{robot.Id}");
                Console.WriteLine("Trecias Robot");
                if (card != null && !card.Description.Equals("Empty"))
                {
                    card.Description = robot.Nickname;
                    Cards.Add(card);
                }
                else {
                    await Http.PostAsJsonAsync<RobotDto>($"/card", robot);
                    SwipeCard temp = await Http.GetFromJsonAsync<SwipeCard>($"card/element/{robot.Id}");
                    temp.Description = robot.Nickname;
                    Cards.Add(temp);
                }



            }
        }
        StateHasChanged();
    }
    private void EditCard(SwipeCard card)
    {
        NavManager.NavigateTo($"/card/edit/{card.fk_robot}", forceLoad: true);
    }
    private void Swipe(int robotId)
    {
        NavManager.NavigateTo($"/robots/swipe/{robotId}", forceLoad: true);
    }
    private void Select(int robotId)
    {
        NavManager.NavigateTo($"/fights/{robotId}", forceLoad: true);
    }
    public async Task EditParts(int id)
    {
        List<RobotPart> robotParts = await Http.GetFromJsonAsync<List<RobotPart>>($"api/robotDto/{id}");
        foreach (var robot in robots)
        {
            if (robot.Id == id)
            {
                robot.Parts = robotParts;
                NavManager.NavigateTo($"/robot/Edit/{id}", forceLoad: true);
            }

        }

    }
}
