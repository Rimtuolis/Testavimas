@page "/fights/betonfight/{fightId:int}"
@using PSA.Shared
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Globalization;
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject NavigationManager NavManager

<section class="cart_area section_padding">
    @if (robots == null) { 
        <p>Doomed statymai</p>
    }
    else{
        <div class="container">
            <div class="cart_inner">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <tbody class="table-group-divider">
                            <tr>
                                <td>
                                    Nickname
                                </td>
                                <td>
                                    Wins
                                </td>
                                <td>
                                    Losses
                                </td>
                                <td>
                                    Draws
                                </td>
                                <td>
                                    Coefficient
                                </td>
                            </tr>
                            @foreach (Robot robot in robots)
                            {
                                <tr>
                                    <td>
                                        @robot.Nickname
                                    </td>
                                    <td>
                                        @robot.Wins
                                    </td>
                                    <td>
                                        @robot.Losses
                                    </td>
                                    <td>
                                        @robot.Draws
                                    </td>
                                    <td>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    
</section>

@if (fight != null) { 
        <EditForm Model="@bet" OnValidSubmit="@HandleValidSubmit">
        <div class="container">
            <div class="cart_inner">
                <div class="mb-3 col-7">
                    <label for="amount"><b>Amount</b></label>
                    <input class="form-control" id="amount" @bind="@bet.Amount" name="amount" type="number" required>
                </div>
                <div>
                    <label for="robots"><b>Choose robot</b></label>
                    <select name="robots" id="robots">
                      <option value="@fight.fk_robot1">@robot1.Nickname</option>
                      <option value="@fight.fk_robot2">@robot2.Nickname</option>
                    </select>
                </div>
                <button type="submit" class="btn">Bet</button>
            </div>
        </div>
    </EditForm>
}



@code {
    [Parameter]
    public int fightId { get; set; }


    private List<Double> coefficients = new List<Double>();
    public double coefficient1, coefficient2;
    private Bet bet = new Bet();
    private Robot? robot1, robot2;
    private List<Robot> robots;
    private Fight? fight;
    private int? counter = 0;

    protected override async Task OnInitializedAsync()
    {
        robots = new List<Robot>();
        fight = await Http.GetFromJsonAsync<Fight>($"api/Fights/{fightId}");
        if (fight is not null)
        {
            
            Console.WriteLine("pirmas");
            robot1 = await Http.GetFromJsonAsync<Robot>($"api/Robots/{fight.fk_robot1}");
            Console.WriteLine("antras");
            robot2 = await Http.GetFromJsonAsync<Robot>($"api/Robots/{fight.fk_robot2}");
            Console.WriteLine("trecias");
            if(robot1 is not null)
            {
                robots.Add(robot1);
                coefficient1 = ((double)robot1.Wins / (double)robot1.Losses);
                coefficients.Add(coefficient1);
            }
            if(robot2 is not null)
            {
                robots.Add(robot2);
                coefficient2 = ((double)robot2.Wins / (double)robot2.Losses);
                coefficients.Add(coefficient2);
            }
        }
        StateHasChanged();

    }

    public async Task HandleValidSubmit()
    {
        bet.fk_fight_id = fightId;
        await Http.PostAsJsonAsync("api/Bets", bet);
        NavManager.NavigateTo("/Tournaments", forceLoad: true);
    }
}

